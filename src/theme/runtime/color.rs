// src/theme/runtime/color.rs

use crate::theme::data::{UiColorPaletteData, UiColorPalettesData};
use bevy::prelude::*;

#[derive(Debug, Clone)]
pub struct UiColorPalettes {
    pub white: UiColorPalette,
    pub black: UiColorPalette,
    pub gray: UiColorPalette,
    pub gray_a: UiColorPalette,
    pub mauve: UiColorPalette,
    pub mauve_a: UiColorPalette,
    pub slate: UiColorPalette,
    pub slate_a: UiColorPalette,
    pub sage: UiColorPalette,
    pub sage_a: UiColorPalette,
    pub olive: UiColorPalette,
    pub olive_a: UiColorPalette,
    pub sand: UiColorPalette,
    pub sand_a: UiColorPalette,
    pub tomato: UiColorPalette,
    pub tomato_a: UiColorPalette,
    pub red: UiColorPalette,
    pub red_a: UiColorPalette,
    pub ruby: UiColorPalette,
    pub ruby_a: UiColorPalette,
    pub crimson: UiColorPalette,
    pub crimson_a: UiColorPalette,
    pub pink: UiColorPalette,
    pub pink_a: UiColorPalette,
    pub plum: UiColorPalette,
    pub plum_a: UiColorPalette,
    pub purple: UiColorPalette,
    pub purple_a: UiColorPalette,
    pub violet: UiColorPalette,
    pub violet_a: UiColorPalette,
    pub iris: UiColorPalette,
    pub iris_a: UiColorPalette,
    pub indigo: UiColorPalette,
    pub indigo_a: UiColorPalette,
    pub blue: UiColorPalette,
    pub blue_a: UiColorPalette,
    pub cyan: UiColorPalette,
    pub cyan_a: UiColorPalette,
    pub teal: UiColorPalette,
    pub teal_a: UiColorPalette,
    pub jade: UiColorPalette,
    pub jade_a: UiColorPalette,
    pub green: UiColorPalette,
    pub green_a: UiColorPalette,
    pub grass: UiColorPalette,
    pub grass_a: UiColorPalette,
    pub bronze: UiColorPalette,
    pub bronze_a: UiColorPalette,
    pub gold: UiColorPalette,
    pub gold_a: UiColorPalette,
    pub brown: UiColorPalette,
    pub brown_a: UiColorPalette,
    pub orange: UiColorPalette,
    pub orange_a: UiColorPalette,
    pub amber: UiColorPalette,
    pub amber_a: UiColorPalette,
    pub yellow: UiColorPalette,
    pub yellow_a: UiColorPalette,
    pub lime: UiColorPalette,
    pub lime_a: UiColorPalette,
    pub mint: UiColorPalette,
    pub mint_a: UiColorPalette,
    pub sky: UiColorPalette,
    pub sky_a: UiColorPalette,
}

#[derive(Debug, Clone, PartialEq)]
pub struct UiColorPalette {
    pub step01: Color,
    pub step02: Color,
    pub step03: Color,
    pub step04: Color,
    pub step05: Color,
    pub step06: Color,
    pub step07: Color,
    pub step08: Color,
    pub step09: Color,
    pub step10: Color,
    pub step11: Color,
    pub step12: Color,
}
impl Default for UiColorPalette {
    fn default() -> Self {
        UiColorPalette {
            step01: Color::NONE,
            step02: Color::NONE,
            step03: Color::NONE,
            step04: Color::NONE,
            step05: Color::NONE,
            step06: Color::NONE,
            step07: Color::NONE,
            step08: Color::NONE,
            step09: Color::NONE,
            step10: Color::NONE,
            step11: Color::NONE,
            step12: Color::NONE,
        }
    }
}

pub fn build_palette(data: &UiColorPaletteData) -> UiColorPalette {
    let conv_color = |c: [f32; 4]| Color::srgba(c[0], c[1], c[2], c[3]);
    UiColorPalette {
        step01: conv_color(data.step01),
        step02: conv_color(data.step02),
        step03: conv_color(data.step03),
        step04: conv_color(data.step04),
        step05: conv_color(data.step05),
        step06: conv_color(data.step06),
        step07: conv_color(data.step07),
        step08: conv_color(data.step08),
        step09: conv_color(data.step09),
        step10: conv_color(data.step10),
        step11: conv_color(data.step11),
        step12: conv_color(data.step12),
    }
}

pub fn build_palettes(data: &UiColorPalettesData) -> UiColorPalettes {
    UiColorPalettes {
        white: build_palette(&data.white),
        black: build_palette(&data.black),
        gray: build_palette(&data.gray),
        gray_a: build_palette(&data.gray_a),
        mauve: build_palette(&data.mauve),
        mauve_a: build_palette(&data.mauve_a),
        slate: build_palette(&data.slate),
        slate_a: build_palette(&data.slate_a),
        sage: build_palette(&data.sage),
        sage_a: build_palette(&data.sage_a),
        olive: build_palette(&data.olive),
        olive_a: build_palette(&data.olive_a),
        sand: build_palette(&data.sand),
        sand_a: build_palette(&data.sand_a),
        tomato: build_palette(&data.tomato),
        tomato_a: build_palette(&data.tomato_a),
        red: build_palette(&data.red),
        red_a: build_palette(&data.red_a),
        ruby: build_palette(&data.ruby),
        ruby_a: build_palette(&data.ruby_a),
        crimson: build_palette(&data.crimson),
        crimson_a: build_palette(&data.crimson_a),
        pink: build_palette(&data.pink),
        pink_a: build_palette(&data.pink_a),
        plum: build_palette(&data.plum),
        plum_a: build_palette(&data.plum_a),
        purple: build_palette(&data.purple),
        purple_a: build_palette(&data.purple_a),
        violet: build_palette(&data.violet),
        violet_a: build_palette(&data.violet_a),
        iris: build_palette(&data.iris),
        iris_a: build_palette(&data.iris_a),
        indigo: build_palette(&data.indigo),
        indigo_a: build_palette(&data.indigo_a),
        blue: build_palette(&data.blue),
        blue_a: build_palette(&data.blue_a),
        cyan: build_palette(&data.cyan),
        cyan_a: build_palette(&data.cyan_a),
        teal: build_palette(&data.teal),
        teal_a: build_palette(&data.teal_a),
        jade: build_palette(&data.jade),
        jade_a: build_palette(&data.jade_a),
        green: build_palette(&data.green),
        green_a: build_palette(&data.green_a),
        grass: build_palette(&data.grass),
        grass_a: build_palette(&data.grass_a),
        bronze: build_palette(&data.bronze),
        bronze_a: build_palette(&data.bronze_a),
        gold: build_palette(&data.gold),
        gold_a: build_palette(&data.gold_a),
        brown: build_palette(&data.brown),
        brown_a: build_palette(&data.brown_a),
        orange: build_palette(&data.orange),
        orange_a: build_palette(&data.orange_a),
        amber: build_palette(&data.amber),
        amber_a: build_palette(&data.amber_a),
        yellow: build_palette(&data.yellow),
        yellow_a: build_palette(&data.yellow_a),
        lime: build_palette(&data.lime),
        lime_a: build_palette(&data.lime_a),
        mint: build_palette(&data.mint),
        mint_a: build_palette(&data.mint_a),
        sky: build_palette(&data.sky),
        sky_a: build_palette(&data.sky_a),
    }
}
