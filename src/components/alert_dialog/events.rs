use bevy::prelude::*;
use crate::components::dialog::CloseDialogEvent;
use super::components::AlertDialogId;

/// Emitted when the user confirms or cancels an alert dialog.
#[derive(Event, Debug, Clone)]
pub struct AlertDialogResultEvent {
    pub id: AlertDialogId,
    pub confirmed: bool,
}

/// Internal actions generated by the alert dialog buttons.
#[derive(Component, Clone, Debug)]
pub enum AlertDialogAction {
    Confirm(AlertDialogId),
    Cancel(AlertDialogId),
}

impl AlertDialogResultEvent {
    pub fn confirmed(id: AlertDialogId) -> Self {
        Self { id, confirmed: true }
    }
    pub fn cancelled(id: AlertDialogId) -> Self {
        Self { id, confirmed: false }
    }
}

/// Helper to convert button clicks into result and close events.
pub fn handle_alert_dialog_actions(
    mut ev_button: EventReader<crate::components::button::ButtonClickedEvent<AlertDialogAction>>, 
    mut ev_result: EventWriter<AlertDialogResultEvent>,
    mut ev_close: EventWriter<CloseDialogEvent>,
) {
    for event in ev_button.read() {
        if let Some(action) = &event.action_id {
            match action {
                AlertDialogAction::Confirm(id) => {
                    ev_result.write(AlertDialogResultEvent::confirmed(*id));
                    ev_close.write(CloseDialogEvent::specific((*id).into()));
                }
                AlertDialogAction::Cancel(id) => {
                    ev_result.write(AlertDialogResultEvent::cancelled(*id));
                    ev_close.write(CloseDialogEvent::specific((*id).into()));
                }
            }
        }
    }
}
